@page "/tables/delete"
@using Microsoft.EntityFrameworkCore
@using Table4U
@inject IDbContextFactory<Table4U.Data.Table4UContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Table</h2>
    <hr />
    @if (table is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Slot</dt>
            <dd class="col-sm-10">@table.Slot</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">IsReserved</dt>
            <dd class="col-sm-10">@table.IsReserved</dd>
        </dl>
        <EditForm method="post" Model="table" OnValidSubmit="DeleteTable" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(table is null)">Delete</button> |
            <a href="/tables">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private Table? table;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        table = await context.Table.FirstOrDefaultAsync(m => m.Id == Id);

        if (table is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteTable()
    {
        using var context = DbFactory.CreateDbContext();
        context.Table.Remove(table!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/tables");
    }
}
